##
##	Alchemy, based on loitering
##
##	If the target has an alembic in front of it, use it
##	Otherwise assume it's in front of a table, so add/remove potions
##

##
##	NOTE: The base target marker must NOT be for useful objects
##	      such the alembic or tables for the NPC to drop potions on
##	      since it's used to get the NPC into the correct location in
##	      the first place.  If you find the NPC not doing the alchemy
##	      routine properly, this may be the reason.  It should be some
##	      random spot where they stare into space, bookcases work well.
##

#
#  Main entrypoint
#  Pick something interesting to look at
#

function do_alchemy
activity

integer num
integer timeout
object o

# Check we've got something to do, otherwise think of something to do

if me.user.user2 = 0	# Are we running or waiting to be primed?

	if_not_exist me.target
		BUG START
		print "Error in alchemy code for NPC "
		set_flag me KNOW_NAME = 1
		print_bestname me
		printcr
		print "Activity must have a target for the first tag|"
		BUG END
		return
	endif

	# Get the object to find
	let me.user.user2 = me.target.tag

endif

# Now we have a base target number, do a random decision which one to go for
# if we can't find an object with that tag, guess again until we have something
# worth doing

let timeout = 7
label round_again

random num between 0 9
add num + me.user.user2
fast_tag o = num near me
if_exists o
	# Make sure we aren't already at that target
	if o.x = me.x
		if o.y = me.y
			# Guess again
			let o = null
		endif
	endif
endif

if_not_exist o
	# Don't do this forever
	add timeout - 1
	if timeout <= 0
		return
	endif
	goto round_again
endif

# Prepare the next stages

queue_action me does alchemy_2 to o
queue_action me does alchemy_3
run_queue me

end


#
#	Alchemy, part II
#	Go to the desired target
#


function alchemy_2
private
integer randwait
integer maxrw
object potion
object alembic

if_exists me.target
	# Try to move there
	move_towards me me.target

	# code 1 means not ready
	if err <> PATH_WAITING
		# Face the same direction as the target object
		force_direction me faces me.target.curdir

		# !! This only seems to work if the object in front is solid?

		# Get object in front
		let current = me
		call get_ahead

		get_object alembic at new_x new_y
		if_exists alembic
			if alembic is called "ALEMBIC"
				let current = alembic
				call alembic.funcs.ucache
			endif

			if alembic is called "potion_*"
				transfer_to_pocket alembic into me
			endif

			if alembic is called "table*"
				find potion = "potion_*" inside me
				if_exists potion
					transfer_object potion to alembic
					move_to_top potion
				endif
			endif

		endif

		# Wait for 7 turns plus a random factor
		let me.user.user1 = 7
		let maxrw = 10 + me.target.stats.str
		random randwait between 0 maxrw
		add me.user.user1 + randwait

		# Chain to part 3
		resume_action me
	endif
endif

end


#
#  Loitering, part III
#  Wait for a while, then go to part I again
#

function alchemy_3
private

add me.user.user1 - 1
if me.user.user1 <= 0
	let me.user.user1 = 0
	# Fall back to first stage and repeat the process
	resume_action me
endif

end




##
##  Working
##

function alchemy_at_location
activity

queue_action me does go_to_location to me.target
queue_action me does do_alchemy to me.target
run_queue me

end


##
##  Bad alchemy
##

function alchemy_bad
object alembic

find_nearest alembic = "alembic" near current

queue_action current does find_alembic to alembic
queue_action current does holywater_explosion2 to alembic
run_queue current

end

function find_alembic
private
object alembic

if_exists me.target
	# Try to move there
	move_towards4 me me.target

	let current = me
	call face_target

	# Get object in front
	let current = me
	call get_ahead

	get_object alembic at new_x new_y
	if_exists alembic
		if alembic is called "ALEMBIC"
			let current = alembic
			call alembic.funcs.ucache
			resume_action me
		endif
	endif
endif

end
