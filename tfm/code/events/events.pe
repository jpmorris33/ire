#########################
#                       #
#  Various plot events  #
#                       #
#########################

# See also:
# randolph.pe - Harrier subplot and treasure island transfer


##
##	Enter a phone dialog (usually with Ransome)
##

function phone_trigger_once
int f
object conversation

let conversation = me
# If it's already been triggered, ignore it.
get_user_flag f = conversation.personalname

if f = 0
	# Okay.  Do we actually have the phone?
	let found_obj = 0
	search_inside player calling look_for_phone

	if found_obj = 0
		return		# No.  don't take the call.
	endif

	# Okay, do the thing
	let current = conversation
	talk_to current.funcs.talk current.personalname
	# Disable it.
	set_user_flag current.personalname = 1
endif

end

##
##	Open the drawbridge to the King's castle
##

function plot_opendrawbridge-edwyg
object temp
integer flag

get_user_flag flag = "open_castle_edwyg"

if flag = 0
	set_user_flag "open_castle_edwyg" = 1

	# Find the lever and pull it
	find_tag temp = "lever" 21
	if_exists temp
		let current = temp
		call current.funcs.use
	else
		print "Can't find drawbridge!|"
	endif
endif

end

##
##  Start the cow attack
##

function plot_cowattack

object cow
integer cowdead

get_user_flag cowdead = "cow_thecow_dead"
if cowdead <> 0
	# The cow's dead
	return
endif


find_tag cow = "cow_thecow" 0
#let cow = current.stats.owner
if_not_exists cow
#	print "No cow|"
	return # Oops
endif

# Bring On The Cow
if_not_onscreen cow
	if_exists current.stats.owner
		transfer_object cow to current.stats.owner.x current.stats.owner.y
		# Wabbit coming!
	endif
endif

play_sound "cow_thecow_moo"

# Cow, your task is to destroy all who enter here
start_action cow does enemy_attack to victim

if victim = player
	set_user_flag "met_thecow" = 1
endif

end

##
##  Is the door to Bedevere's cell in place?
##

function plot_breakoutbedevere
object o

set_user_flag "true" = 0
set_user_flag "false" = 1

# Does the door exist?
find_tag o = "stonedoor5_lock" 60002
if_not_exists o
	set_user_flag "true" = 1
	set_user_flag "false" = 0
	return
endif

end

##
##  Destroy Bedevere (the new one will be created in mawdor)
##

function plot_breakoutbedevere2
destroy current
set_user_flag "broke_out_bedevere" = 1
end


##
##  Activate new Bedevere in Lakeside (was Mawdor)
##

function plot_newbedevere

integer i

get_user_flag i = "broke_out_bedevere"
if i = 0
	# Player hasn't freed him
	return
endif

# Transfer Bedevere and all his personal effects to the workshop
#move_tag -24 to -30 490 (Mawdor)
move_tag -24 to -339 -164

# And destroy the trigger so it doesn't happen twice and throw him into the sea
destroy current

end


##
##  Temporary Ya'Do stuff
##

function yado_teleport_package
object telep

find_tag telep = "teleporter0_off" 33
if_exists telep
	replace telep = "teleporter0"
endif

end



##
##  Confronting Darett
##

function trap_darett
object o
int f

if_not_exists current
	# Shit
	return
endif

# Get the trap's owner, Darett.  Does he exist?
let o = current.stats.owner
if_not_exists o
	return
endif

# Is he dead?
if o.stats.hp < 1
	return
endif

# If it's already been triggered, ignore it.
get_user_flag f = "darett_attack"

if f = 0
	queue_action o does seek_target_talk
	run_queue o
#	talk_to o.funcs.talk
else
	# Start killing
	let me = o
	let current = o
	call attack_party
endif

end





##
##	Talk to the trap owner
##

function talk_to_owner
object conversation

let conversation = me.stats.owner

# Is the owner OK?

if_not_exists conversation
	return
endif

if conversation.stats.hp < 1
	return
endif

if me.user.user10 <> 0
	return	# The player is allowed to enter
endif

# Okay, do the thing
let current = conversation
talk_to conversation.funcs.talk
#talk_to conversation.funcs.talk current.personalname

end


##
##	God comments on something
##

function god_comments
object conversation

let conversation = me
# If it's already been triggered, ignore it.

if conversation.user.user1 = 0
	let conversation.user.user1 = 1
	# Okay, do the thing
	let current = conversation
	talk_to current.funcs.talk current.funcs.user1
endif

end


function death_opengate
object obj

find_tag obj = "lever" -24
if_exists obj
	let current = obj
	call current.funcs.ucache
endif

find_tag obj = "lever" -25
if_exists obj
	let current = obj
	call current.funcs.ucache
endif

# Stop Death talking to you automatically after you have access
find_tag obj = "trap_radius" -24
if_exists obj
	let obj.user.user10 = 1
endif

end

##
##  Set where the player will be resurrected
##

function set_respawn

# This is now deprecated since we have the map_area system
# But I'm keeping the mechanism around in case we need
# to do this conditionally or something

#integer spawn
#
#if_exists current
#	let spawn = 0 - current.tag
#	let spawn_override = spawn
#endif

end


##
##	Move the Sceptre to its nice new cabinet
##

function MoveSceptre
object sceptre
object king
object dest

find_tag sceptre = "SCEPTRE" 0

if_exists sceptre
	# Make sure it belongs to the King
	find_tag king = "KING" 36
	if_exists king
		let sceptre.stats.owner = king
	endif

	# Move it into the cabinet (tag 40)
	find_tag dest = "TARGET" 40
	insert_after dest = sceptre
endif
end

##
##	Reviving snow white
##

function snowwhite

if me = player
	print "You kiss the dead wolf and she comes to life, giving you a big wet kiss in return."
	printcr
endif

add me.stats.karma + 25
add me.user.experience + 150

set_flag current.pocket NO_SCHEDULE = 0	# Activate wolf schedule
spill current				# Remove the other wolf
destroy current				# Destroy the sleeping wolf-shell

end


##
##	Enter a drakaan medallion dialog
##

function medal_trigger_once
int f
object conversation

let conversation = me
# If it's already been triggered, ignore it.
get_user_flag f = conversation.personalname

if f = 0
	# Okay.  Do we actually have the medallion?
	let found_obj = 0
	search_inside player calling look_for_medallion

	if found_obj = 0
		return		# No.  don't take the call.
	endif

	# Okay, do the thing
	let current = conversation
	talk_to current.funcs.talk current.personalname
	# Disable it.
	set_user_flag current.personalname = 1
endif
end

##
##
##

function got_medallion

let found_obj = 0
search_inside player calling look_for_medallion

set_user_flag "true" = 0
set_user_flag "false" = 1

if found_obj <> 0
	set_user_flag "true" = 1
	set_user_flag "false" = 0
endif

end


##
##  The player betrays steeljaw to the King
##

function steeljaw_execution
object steeljaw
object spot
find_tag steeljaw = "waarg_male" 49
find_tag steeljaw = "target" 50
if_exists steeljaw
	# Steeljaw is dragged before the throne and executed
	transfer_object steeljaw to spot.x spot.y
	let steeljaw.stats.hp = -1
	check_hurt steeljaw
endif
end


##
##   Mr. Packer Goes To Hell
##

function go_to_hell
int f

get_user_flag f = "hell_proofed"

let found_obj = 0
search_inside player calling look_for_jug
if found_obj = 1
	if f = 0
		talk_to "people/church/lord.txt" "hell3"
		set_user_flag "hell_proofed" = 1
	endif
	return
endif

get_user_flag f = "been_to_hell"

let current = me
if f = 0
	talk_to "people/church/lord.txt" "hell"
else
	talk_to "people/church/lord.txt" "hell2"
endif

set_user_flag "been_to_hell" = 1

change_map 6 tag 1
end

##
##	Helper functions
##

##
##	Support for the phone dialog
##

local
	integer found_obj

	function look_for_phone
	private
	if found_obj = 0
		if current is called "mobile"
			let found_obj = 1
		endif
	endif
	end
	

	function look_for_medallion
	private
	if found_obj = 0
		if current is called "dragoncom"
			let found_obj = 1
		endif
	endif
	end


	function look_for_jug
	private
	if found_obj = 0
		if current is called "jug_insanity"
			let found_obj = 1
		endif
	endif
	end
endlocal


##
##  Resurrect W-OLF
##

function resurrect_w_olf
object head
object temp
object dest

find head = "DEADCYBERWOLF_QUEST_HEAD" inside me
set_user_flag "false" = 1
set_user_flag "true" = 0

find_tag temp = "cyberwolf" 1008
if_not_exists temp
	return
endif

find_tag dest = "target" 1009
if_not_exists dest
	return
endif


if_exists head
	set_user_flag "false" = 0
	set_user_flag "true" = 1

	destroy head

	# Switch the wolf on
	let temp.stats.hp = 100
	check_hurt temp

	# Move them into position
	transfer_object temp to dest.x dest.y
	stop_action temp
	resume_action temp
endif

end

##
##  Activate the King's elite guard
##

function edwyg_panthers
object panther

find_tag panther = "GUARD_PANTHER" 110
if_not_exists panther
	print "Oops: no panther 110|"
	return
endif

# Switch the panther on

let panther.stats.hp = 1200
check_hurt panther

stop_action panther
resume_action panther

# Now the other one

find_tag panther = "GUARD_PANTHER" 111
if_not_exists panther
	print "Oops: no panther 111|"
	return
endif

let panther.stats.hp = 1200
check_hurt panther

stop_action panther
resume_action panther
end



##
##  Mawdor murder mystery
##

function plot_mawdormissing_evidence
if_not_user_flag "mawdor_missing_solved"
	set_user_flag "mawdor_missing_evidence" = 1
	journal "jrn_MawdorMissingEvidence"
endif
end

function plot_mawdormissing_solved
private
object farmer
object pike
object o

# Do justice on him, should have no effect if the player already lopped his head off
find_tag farmer = "man_generic" 69
if_not_exists farmer
	find_tag farmer = "DEADPEASANT" 69
endif


if_exists farmer
	let current = farmer
	call behead_current
endif

# Now pike the head
find_tag pike = "pike" 69
if_exists pike
	find_tag farmer = "peasant_head" 69
	if_exists farmer
		# Make the pike bloody and have the head in the TL corner
		force_direction pike faces LEFT
		force_direction farmer faces DOWN
		# Now stick them together
		transfer_object farmer to pike.x pike.y
		move_to_top farmer
	endif
else
	print "ERROR: pike not found|"
endif

# I suppose we'd better rescue the kid too
find_tag o = "stonedoor3_lock" 68
if_exists o
	# Open the door for versimilitude
	replace o = "stonedoor3_open"
endif

# If the kid's alive, reboot them
# If the player did this while they're dead and resurrects them, that's their own damned fault
find_tag o = "man_boy" 69
if_exists o
	set_user_flag "mawdor_missing_foundkid" = 1
	set_flag o NO_SCHEDULE = 0
	stop_action o
	resume_action o
endif

end

function plot_mawdormissing_gotbones
private

set_user_flag "false" = 1
set_user_flag "true" = 0

search_inside player calling find_mawdor_bones_func

end


function find_mawdor_bones_func
private
if current.tag <> 69
	return
endif
if current is called "bones*"
	set_user_flag "false" = 0
	set_user_flag "true" = 1
	return
endif
end


##
##
##

function free_drrob
object obj
find_tag obj = "STONEDOOR3_LOCK" 800022
if_exists obj
	replace obj = "STONEDOOR3_OPEN"
endif

find_tag obj = "MAN_GENERIC*" 800022
if_exists obj
	set_flag obj NO_SCHEDULE = 0
	stop_action obj
	resume_action obj
endif



end




##
##  Disable forcefields
##

function plot_disable_forcefields
object_array stuff[32]
object modulator
integer ctr

if_user_flag "airtravel_on"
	return
endif

# Take the forcefield down on the bridge
find_tags stuff[1] = "forcefield_on" 59
for ctr = 1 to 32
	if_exists stuff[ctr]
		stopfx stuff[ctr]
		change stuff[ctr] = "forcefield_off"
	endif
next ctr

# Break the modulator
find_tag modulator = "WALL_METAL_WIREPANEL5" 60
if_not_exists modulator
	# Did they open it?
	find_tag modulator = "WALL_METAL_WIREPANEL6" 60
endif

if_exists modulator
	change modulator = "WALL_METAL_WIREPANEL7"
endif

end

##
##  Set up boardroom
##

function plot_boardroom
object tag
object communicator

# Check it isn't already there somehow
find_tag communicator = "COMMS_UNIT2" 11111
if_exists communicator
	return
endif

# Create one
find_tag tag = "TARGET" 11111
create communicator = "COMMS_UNIT2"
let communicator.tag = 11111
insert_after tag = communicator

end



##
##
##

function plotevent_callback
int mapno
object target
object src

# Make hints appear after certain events have occurred
if_user_flag "find_accesskey"
	get_mapno mapno
	if mapno = 1
	or mapno = 4
		find_tag target = "TARGET" 2000
		if_exists target
			find_tag src = "PRINTOUT*" 2000
			transfer_object src to target.x target.y
			move_to_top src
			destroy target	# So it only happens once per map
		endif
	endif
endif

end
