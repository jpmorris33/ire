##########################################
#                                        #
#  Sleep, beds, waking up spell          #
#                                        #
##########################################



##
## Sleep - Find something to sleep in
##

function go_to_sleep
activity
object bed

# Stop flying if you're a hawk
call hawk_stopflying

# If given a target, assume this is the bed

if_exists me.target
	let bed = me.target
else
	find_nearest bed = "bed_covered" near me
	if_not_exist bed
		find_nearest bed = "bed" near me
		if_not_exist bed
			find_nearest bed = "bed2" near me
			if_not_exist bed
				find_nearest bed = "chair" near me
			endif
		endif
	endif
endif


if_exists bed
	# Find the bed and use it
	if bed.label.location <> ""
		# A far-off bed
		queue_action me does go_to_location to bed
		queue_action me does seek_target_use to bed
		run_queue me
		return
	else
		start_action me does seek_target_use to bed
		return
	endif

else
	# Sleep on the floor
	let current = me
	call lie_down
	# Deep sleep (not used yet)
	let me.user.unconscious = 9999

	start_action me does sleeping
endif


end



##
## Get In Bed - Go into the bed and sleep 
##

function get_in_bed

int x
int y
int num
object bed
object food

let x = me.x
let y = me.y

# Check to make sure the bed isn't in your pocket
# This would move the player into his pocket, hurting the game engine

if me = player
	let bed = current
else
	let bed = me.target
endif


if_not_exist bed
	print "No bed chosen for "
	print me.name
	printcr
	return
endif


# Stop people climbing into their bed if the player is carrying it
if_in_pocket bed
	if me = player
		print "Put it on the ground first."
		printcr
	endif
	return
endif


# Now decide what to change it into

if bed is called "bed_covered"
	# Doggie lie on bed, not get in it
	if me.label.race = "waarg"
		set_sequence me "wolfa_sleep_r"
	else
		transfer_to_pocket me to bed
		set_flag me IN_BED = 1
		change bed = "bed_covered_full"
	endif
endif

if bed is called "bed"
	# Doggie lie on bed, not get in it
	if me.label.race = "waarg"
		set_sequence me "wolfa_sleep_r"
	else
		transfer_to_pocket me to bed
		set_flag me IN_BED = 1
		change bed = "bed_full"
	endif
endif


if bed is called "bed2"
	transfer_to_pocket me to bed
	set_flag me IN_BED = 1
	if me.label.race = "waarg"
		change bed = "bed2a_full"
	else
		change bed = "bed2_full"
	endif
endif

let bed.user.user19 = bed.stats.weight	# I'll assume a bed won't commit crimes
let bed.stats.weight = -1


# Now you fall into a deep, deep sleep (10000 turns is appox. one week)
let me.user.unconscious = 9999

# For the player, decide how long to kip for

if me = player
	print "How many hours do you want to sleep for?"
	printcr

	let num = 0 # Default is 0, no hours, cancel sleep
	input num
	if num > 0
		if num > 12
			let num = 12
		endif

		fade_out
		add game_hour + num
		let game_minute = 0
		check_time

		add num * 250	# Wait 1/4 sec for each hour
		wait num BLOCKING

		find food = "food*" inside player
		if_exists food
			destroy food
			print "You eat some food."
			printcr
			redraw_text

			# Heal the player somewhat
			add num / 25	# Now 10* number of hours
			add me.stats.hp + num
			if me.stats.hp > me.maxstats.hp
				let me.stats.hp = me.maxstats.hp
			endif
			check_hurt me
		endif

		resync_everything
		fade_in
	endif

	# Now, wake up
	let me.user.unconscious = 0

	if bed is called "bed_full"
		change bed = "bed"
		if me.label.race <> "waarg"
			force_from_pocket me from bed to x y
			set_flag me IN_BED = 0
		endif
	endif
	
	if bed is called "bed2_full"
		change bed = "bed2"
		force_from_pocket me from bed to x y
		set_flag me IN_BED = 0
	endif

	if bed is called "bed2a_full"
		change bed = "bed2"
		force_from_pocket me from bed to x y
		set_flag me IN_BED = 0
	endif

	if bed is called "bed_covered_full"
		change bed = "bed_covered"
		force_from_pocket me from bed to x y
		set_flag me IN_BED = 0
	endif

	# Set the bed's weight back so it can perhaps be carried again
	let bed.stats.weight = bed.user.user19	# Set it back

endif

if me <> player
	# Refresh NPC to full health
	let me.stats.hp = me.maxstats.hp
	check_hurt me
endif


end


##
## hurt_bed - Hurt the people in the bed, not the bed
##

function hurt_bed

integer amt
object temp
object old
object oldp

let old = current
let oldp = me

# Empty bed
if_not_exist current.pocket
	return
endif

let amt = old.user.oldhp - old.stats.hp

# Now do a linked list traversal.. bad magic ;-)

let temp = old.pocket
do
	let me = temp

	# Hurt them
	add temp.stats.hp - amt
	check_hurt temp

	# If they're dead, stain the bed
	if temp.stats.hp < 1
		if old is called "bed_full"
			replace old = "bed_bloody"
		endif
		if old is called "BED_COVERED_FULL"
			replace old = "BED_COVERED_BLOODY"
		endif
		if old is called "bed2_full"
		or old is called "bed2a_full"
			replace old = "bed2_bloody"
		endif

		# Spill the person out of the bed
		spill old
		let current = old
		let me = oldp
		return
	else
		# Me should be correct for this
		let current = temp
		call wake_up
		# Force a reset, because WakeUp will make him
		# do the last activity, which is invariably 'go to bed'
		stop_action me
		call me.funcs.hcache
	endif

	# Go to the next object in the list
	let temp = temp.next
while temp

let current = old
let me = oldp

end


##
##  Wake up person in the bed (spell)
##


function awaken_current
object temp
object oldme

# If it is directly a living thing, wake it

if current.stats.hp > 0
	if current.stats.intel > 40
		let oldme = me
		let me = current
		call wake_up
		let me = oldme
		let spell_failed = 0
		return
	endif
endif

# If it is a bed, look inside and wake the occupant

let temp = current.pocket
do
	if_exists temp
		if temp.stats.hp > 0
			if temp.stats.intel > 40
				let oldme = me
				let me = temp
				spill me
				call wake_up
				let me = oldme
				let spell_failed = 0
				return
			endif
		endif
		let temp = temp.next
	endif

while temp

let spell_failed = 1
end


##
##  Send someone to sleep (spell)
##

function sleep_current

let spell_failed = 1

# If it is not alive, stop
if current.stats.hp < 1
	return
endif

if current.stats.intel <= 40
	return
endif

# It's alive, make it sleep
call lie_down
if current = player
	fade_out
	add game_hour + 2
	let game_minute = 0
	check_time

	# Wait 1/4 sec for each hour (2)
	wait 500 BLOCKING

	resync_everything
	fade_in
else
	let current.user.unconscious = 60	# Sleep one hour if you're not the player
	start_action current does sleeping
endif

# Success
let spell_failed = 0
end


##
##  Start the bed activity (for conversation)
##

function I_must_sleep_now
start_action current does go_to_sleep
end

##
##  Sleeping action
##

function sleeping
activity
private

# Come alive again
if me.user.unconscious < 1

	set_direction me facing me.curdir	# Stand up!
	stop_action me				# Force a halt
	let current = me
	call wake_up				# Wake up properly
	resume_action me			# Go and do something
	return
endif

# Sleep a bit longer
add me.user.unconscious - 1
end


##
##  Wake Up - Get 'me' out of bed
##

function wake_up
object bed

if_in_pocket me

	let bed = me.parent

	if_exists bed
		# Change sprite as appropriate
		if bed is called "bed_full"
			change bed = "bed"
			force_from_pocket me from bed to bed.x bed.y
		endif

		if bed is called "bed_covered_full"
			change bed = "bed_covered"
			force_from_pocket me from bed to bed.x bed.y
		endif

		if bed is called "bed2_full"
			change bed = "bed2"
			force_from_pocket me from bed to bed.x bed.y
		endif

		if bed is called "bed2a_full"
			change bed = "bed2"
			force_from_pocket me from bed to bed.x bed.y
		endif

		# Set the bed's weight back so it can perhaps be carried again
		let bed.stats.weight = bed.user.user19      # Set it back

	endif

	# Wake Up
	let me.user.unconscious = 0
	set_flag me IN_BED = 0
#	resume_activity	me	# Do whatever you were doing
endif

end
