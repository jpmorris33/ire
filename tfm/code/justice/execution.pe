##
##	Someone is executed
##



##
##	Hang the victim
##

function hang_victim
object target
object hatch
object guard
int x
int y
int x2

# Mark the victim of the arrest, so everyone else stops trying to arrest them
let arrested = victim

if victim = player


	find_tag target = "gallows" 10000
	if_not_exists target
		print "Error: no gallows to hang the player from|"
		return
	endif

	# Put the player on the scaffold

	fade_out
#	push_object victim to target.x target.y
#	if party_mode = 1
#	move_party_to target
#		spill target
	let x = target.x
	let y = target.y
	add x + 1
	add y + 2

	# Find the trapdoor and ensure it is shut
	get_first_object hatch = x y
	# There might be other things in the way (e.g. blood)
	find_next hatch = "HATCH_GALLOWS_*" in hatch
	
	if hatch is called "HATCH_GALLOWS_OPENED"
		let me = hatch.stats.owner
		let current = hatch.stats.owner
		if_exists current
			call current.funcs.use
		else
			print "Error: cannot close gallows (hatch has no parent)|"
			fade_in
			return
		endif
	else
		if hatch is called "HATCH_*"
			#We're OK, carry on
		else
			print "Error: did not find gallows hatch!|"
			printx hatch
			printcr
			print ": "
			print hatch.name
			printcr
			fade_in
			return
		endif
	endif

	if_not_exists hatch.stats.owner
		print "Error: gallows hatch is not owned by the release lever!|"
		fade_in
		return
	endif

	# Create a guard and have them pull the lever
	let x2 = y + 9
	create guard = "guard"
	transfer_object guard to x x2
	queue_action guard does seek_target_use_resume to hatch.stats.owner
	queue_action guard does creature_despawn
	run_queue guard
	set_flag guard IS_SPAWNED = 1	# Guard must evapourate afterwards

	# Move the player into position and have them bound
	transfer_object victim to x y
	set_direction victim facing SOUTH
	if victim = player
		set_leader victim player_automatic follower_action
		# Skip keyboard input for first cycle
		call player_automatic
	endif

	fade_in

	# Go.. player is helpless and awaiting execution

endif

end


function hang_player
let victim = player
call hang_victim
end


function guillotine_player

object guillotine
object guillotine_lever
object oldvictim
object guard
integer x
integer y
string victimtype

if victim = player

	find_tag guillotine = "guillotine" 10000
	if_not_exists guillotine
		find_tag guillotine = "guillotine_bloody" 10000
		if_not_exists guillotine
			print "Error: no guillotine for the player!  Using silly workaround|"
			let current = player
			call behead_current
			return
		endif
	endif
	find_nearest guillotine_lever = "guillotine_lever" near guillotine
	if_not_exists guillotine_lever
		let guillotine_lever = guillotine
	endif

	fade_out

	# Clean up if anyone still there (cathedral)
	find_tag oldvictim = "guillotine_victim*" guillotine.tag
	if_exists oldvictim
		destroy oldvictim
	endif

	# In case it's bloodied
	replace guillotine = "guillotine"
	set_direction guillotine facing NORTH

	# move player to guillotine
	let x = guillotine.x + 2
	let y = guillotine.y + 1

	transfer_object player to x y
	# TODO: support other player types

	get_data victimtype WHERE player_guillotine = victim.name
	if_not_exists victimtype
		let victimtype = "guillotine_victim_player"
	endif

	set_sequence player = victimtype
	if victim = player
		set_leader victim player_automatic follower_action
		# Skip keyboard input for first cycle
		call player_automatic
	endif
	
	# Create a guard and have them pull the lever
	let y = y + 6
	create guard = "guard"
	transfer_object guard to x y
	queue_action guard does seek_target_use_resume to guillotine_lever
	queue_action guard does creature_despawn
	run_queue guard
	set_flag guard IS_SPAWNED = 1	# Guard must evapourate afterwards

	fade_in

	# Go.. player is helpless and awaiting execution
endif

end



function guillotine_player_waarg

object guillotine
object guillotine_lever
object oldvictim
object guard
integer x
integer y
string victimtype

if victim = player

	find_tag guillotine = "guillotine_waarg" 10000
	if_not_exists guillotine
		find_tag guillotine = "guillotine_waarg_bloody" 10000
		if_not_exists guillotine
			print "Error: no guillotine for the player!  Using silly workaround|"
			let current = player
			call behead_current
			return
		endif
	endif
	find_nearest guillotine_lever = "guillotine_lever" near guillotine
	if_not_exists guillotine_lever
		let guillotine_lever = guillotine
	endif

	fade_out

	# Clean up if anyone still there (cathedral)
	find_tag oldvictim = "guillotine_victim*" guillotine.tag
	if_exists oldvictim
		destroy oldvictim
	endif

	# In case it's bloodied
	replace guillotine = "guillotine_waarg"
	set_direction guillotine facing NORTH

	# move player to guillotine
	let x = guillotine.x + 2
	let y = guillotine.y + 1

	transfer_object player to x y
	# TODO: support other player types

	get_data victimtype WHERE player_guillotine = victim.name
	if_not_exists victimtype
		let victimtype = "guillotine_victim_player"
	endif

	set_sequence player = victimtype
	if victim = player
		set_leader victim player_automatic follower_action
		# Skip keyboard input for first cycle
		call player_automatic
	endif
	
	# Create a guard and have them pull the lever
	let y = y + 6
	create guard = "waarg_guard"
	transfer_object guard to x y
	queue_action guard does seek_target_use_resume to guillotine_lever
	queue_action guard does creature_despawn
	run_queue guard
	set_flag guard IS_SPAWNED = 1	# Guard must evapourate afterwards

	fade_in

	# Go.. player is helpless and awaiting execution
endif

end

