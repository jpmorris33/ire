############################################
#                                          #
#  Special effects when a weapon is used   #
#  Firebolts are thrown, chairs break etc  #
#                                          #
############################################

local
string enemyname
endlocal

##
##  Attack engine for energy weapons
##

function attack_laser

int r

# Check range, and move towards foe
get_line_of_sight r = attacker attacker.enemy

if r > attackweapon.stats.range
or r = 0
	if attacker == player
		print "Out of range!"
		printcr
	else
		move_towards attacker attacker.enemy
	endif
	return
endif

# We're in range, so do the attack.

# Set a suitable attack frame if we have one
let current = attacker
call attack_frame

let new_x = attacker.enemy.x
let new_y = attacker.enemy.y

call fudge_thrown  # Cause them to miss, perhaps

# Zap the enemy
let attacker.target = attacker.enemy
overfx attacker does attacker.funcs.user1
wait 250 NONBLOCKING
stop_fx attacker

# reset the attacker's frame
set_direction attacker = attacker.curdir

if throw_missed
	let hit_damage = -1
	return
endif

# Apply the damage
if new_x = attacker.enemy.x
and new_y = attacker.enemy.y
	# Attribute blame
	if_not_exists attacker.enemy.enemy
		let attacker.enemy.enemy = attacker
	endif
	# Hurt me
	add attacker.enemy.stats.hp - attacker.stats.damage
	check_hurt attacker.enemy
endif

end


##
##  Attack engine for energy weapons without LOS checking
##

function attack_laseralways
int dist

get_distance dist = attacker attacker.enemy
if dist > 15
	# OK, forget it (avoid killing player on other side of map)
	return
endif

if_not_flag attacker IS_FIXED
	call face_enemy
endif

# Set a suitable attack frame if we have one
let current = attacker
call attack_frame

let new_x = attacker.enemy.x
let new_y = attacker.enemy.y

#call fudge_thrown  # Cause them to miss, perhaps

# Zap the enemy (but only if visible)
if_onscreen attacker.enemy
	let attacker.target = attacker.enemy
	overfx attacker does attacker.funcs.user1
	wait 1000 NONBLOCKING
	stop_fx attacker
endif

# reset the attacker's frame
set_direction attacker = attacker.curdir

# Apply the damage
if new_x = attacker.enemy.x
and new_y = attacker.enemy.y
	# Attribute blame
	if_not_exists attacker.enemy.enemy
		let attacker.enemy.enemy = attacker
	endif
	# Hurt me
	add attacker.enemy.stats.hp - attacker.stats.damage
	check_hurt attacker.enemy
endif

end



/*
# Bottles

if attackweapon is called "bottle_full"
or attackweapon is called "bottle_empty"
	let temp = current
	let current = attackweapon
	let attackweapon.x = enemy.x		# Bottle spills on enemy
	let attackweapon.y = enemy.y
	call smashbottle
	let current = temp
endif



# Tree 1

if enemy is called "tree01"
	get_decor enemyx enemyy enemy
	if enemyx <> 0
		del_decor enemyx enemyy enemy
		create enemy = "tree01_real"
		print "treeify at "
		print enemyx
		print ","
		print enemyy
		printcr
		transfer_object enemy to enemyx enemyy
	endif
endif

*/



##
##  Attack engine for venom-spitting creatures
##

function attack_venom

object ammo

# Create some venom to throw and align it with the attacker

create ammo = "poisonbolt"
set_direction ammo = attacker.curdir
transfer_object ammo to attacker.x attacker.y
let ammo.enemy = attacker.enemy
let ammo.stats.owner = attacker

# Set a suitable attack frame if we have one
let current = attacker
call attack_frame

# Throw the ammo at the enemy
let victim = ammo
let new_x = attacker.enemy.x
let new_y = attacker.enemy.y

call fudge_thrown  # Cause them to miss, perhaps
if throw_missed
	let ammo.enemy = null
	let hit_damage = -1
endif

let drop_quiet = 1	# Drop without comments
let drop_nodamage = 1	# Prevent internal damage from thrown objects
call do_drop

# reset the attacker's frame
set_direction attacker = attacker.curdir

# Smash the ammo to trigger its attack
let ammo.stats.hp = -1
check_hurt ammo
end


##
##  Attack engine for fire-spitting creatures, e.g. todes
##

function attack_firebolt

object ammo

# Create some venom to throw and align it with the attacker

create ammo = "firebolt"
set_direction ammo = attacker.curdir
transfer_object ammo to attacker.x attacker.y
let ammo.enemy = attacker.enemy
let ammo.stats.owner = attacker

# Set a suitable attack frame if we have one
let current = attacker
call attack_frame

# Throw the ammo at the enemy
let victim = ammo
let new_x = attacker.enemy.x
let new_y = attacker.enemy.y

call fudge_thrown  # Cause them to miss, perhaps
if throw_missed
	let ammo.enemy = null
	let hit_damage = -1
endif

let drop_quiet = 1	# Drop without comments
let drop_nodamage = 1	# Prevent internal damage from thrown objects
call do_drop

# reset the attacker's frame
set_direction attacker = attacker.curdir

# Smash the ammo to trigger its attack
let ammo.stats.hp = -1
check_hurt ammo
end

##
##  Chair used as a weapon
##

function chair_weapon

	# Smash the chair
	call break_chair

	# Use hit damage from chair being smashed over their head
	let hit_damage = current.stats.weight / 100	# Crash!

	# Clip damage to prevent chair killing a fully healthy man outright
	if hit_damage > 75
		let hit_damage = 75
	endif

	# Make sure it is still properly wielded
	set_flag attackweapon IS_WIELDED = 1
end


##
##  Mining
##

function pickaxe_weapon
integer orepct
object ore

	# Are we mining with it?
	if attacker.enemy is called "rockface"
		random orepct between 1 25
		if orepct > 18
			create ore = attacker.enemy.funcs.user1
			move_to_pocket ore to attacker
			if attacker = player
				print "You got some ore."
				printcr
			endif
		else
			if attacker = player
				print "Didn't get anything."
				printcr
			endif
		endif
		# Don't hurt the rock
		let hit_damage = 0
		return
	endif

	# If you hit someone with a pickaxe it gets very messy
	if_flag attacker.enemy IS_BIOLOGICAL
		let hit_damage = 50	# was 75: too easy!
		return
	endif

end

##
##  Resurrection axe
##

function axe_rd_weapon

let hit_damage = 20

if attacker.enemy.stats.hp < 1
	let current = attacker.enemy
	call resurrect
	let hit_damage = 0
endif

end

##
##  Decapitate
##

function decap_attack
	integer decap_threshold
	integer decap_chance = 100 # Definite to begin with
	integer chance
	object enemy

	# Prevent the guards beheading someone they're supposed to arrest
	if arrest_only
		return
	endif

	let enemy = attacker.enemy
	let enemyname = ""

	# Only for fleshy things
	if_not_flag enemy IS_BIOLOGICAL
		return
	endif

	if_flag enemy KNOW_NAME
		set_string tempstring = enemy.personalname
	else
		set_string tempstring = enemy.shortdesc
	endif


	let decap_threshold = attackweapon.stats.damage / 2

	# Armour may make decapitation less likely

	if_exists enemy.wield.neck
		if enemy.wield.neck is called "GORGET*"
			add decap_chance / 3
		endif
	endif

	if_exists enemy.wield.body
		if enemy.wield.body is called "ARMOUR03"
		or enemy.wield.body is called "ARMOUR04"
		or enemy.wield.body is called "ARMOUR05"
			add decap_chance / 3
		endif
	endif

	random chance between 0 99

	# Need to see how this works out with specials like the Pope
	# May need some adjustment later

	if enemy.stats.hp < decap_threshold
	and enemy.stats.hp > 0

#		print "chance = "
#		print chance
#		print ", dc = "
#		print decap_chance
#		printcr

		if chance < decap_chance
			# Off with their heads!
			let enemyname = tempstring
			let enemy.stats.hp = -50
			check_hurt enemy
			let hit_damage = 1

		endif
	endif

	# If they're dead, hack the head off
	if enemy.stats.hp < 1
		call decap_attack_corpse_core
		return
	endif

end


function decap_attack_corpse
	object corpse
	let corpse = attackweapon.enemy
	let attacker.enemy = corpse

	if_flag corpse KNOW_NAME
		set_string tempstring = corpse.personalname
	else
		set_string tempstring = corpse.shortdesc
	endif
	let enemyname = tempstring
	call decap_attack_corpse_core
end


local
function decap_attack_corpse_core

	string headobject
	string bodyobject
	object enemy
	object body
	object head
	string enemyobject

	let enemy = attacker.enemy

	# Only for fleshy things
	if_not_flag enemy IS_BIOLOGICAL
		return
	endif

	# They must be dead
	if enemy.stats.hp > 0
		return
	endif

	# Back up the name since we're about to transmute them into a corpse
	let enemyobject = enemy.name

	# See if we can do this
	get_data headobject where heads_table = enemyobject
	if_exists headobject
		change enemy = headobject
		let head = enemy
		let head.stats.weight = 1500
		# Ensure justice is carried out
		let head.stats.intel = 100
	else
		# Abort
		return
	endif

	# Now find a suitable corpse
	get_data bodyobject where bodies_table = enemyobject
	if_exists bodyobject

		if enemyname <> ""
			print enemyname
			print " is decapitated!"
			printcr
		endif

		create body = bodyobject
		transfer_object body to head.x head.y
		move_to_top head

		# Subtract the weight of the head
		add body.stats.weight - head.stats.weight
		# Ensure justice is carried out
		let body.enemy = attacker
		let body.stats.intel = 100

		if_flag head IS_SPAWNED
			set_flag body IS_SPAWNED = 1
		endif

		# Move possessions to the body
		move_contents head to body

		# Now bleed for me...
		let current = body
		call make_blood_fatal

	else
		print "ERROR: no body found for "
		print enemyobject
		printcr
		# Crap - what do we do now?!
		return
	endif

	# Are they in bed?
	if enemy.parent is called "bed*"
		let current = enemy.parent
		call hurt_bed
	endif

end
endlocal


##
##  Execute someone, no questions asked
##

function behead_current

let attacker = current
let attacker.enemy = current

if_flag current KNOW_NAME
	set_string tempstring = current.personalname
else
	set_string tempstring = current.shortdesc
endif


# Off with their heads!
let enemyname = tempstring
let attacker.stats.hp = -50
check_hurt attacker
let hit_damage = 1
call decap_attack_corpse_core

end

##
##  tranquiliser rifle
##

function tranq_attack

	let current = attacker.enemy

	# Only for fleshy things
	if_not_flag current IS_BIOLOGICAL
		return
	endif

	let hit_damage = 0
	call sleep_current	

end


