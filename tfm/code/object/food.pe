######################################################
#                                                    #
#  Use food: Either to eat or to prepare for eating  #
#	     Also Potions			     #
#                                                    #
######################################################

# Global variable
object food_dest
integer eat_silently = 0

local
string fruitgot
string fruitnotgot
string fruitobj
endlocal

##
##	Eat
##

function eat_food
object p
let p = current

# Player has a choice, NPCs use on themselves

if me = player
and eat_silently = 0
	let current = player

	print "Use "
	print p.shortdesc
	print " on "
	redraw_text

	call get_far
else
	let current = me
endif

if_not_exist current
	print "nothing."
	printcr
	return
endif

# Print message only if player
if me = player
	print_best_name current
	printcr
endif

# Check for special effects (sandwich-making etc)
let food_dest = p
call food_effects
# dest is set to NULL on success
if_not_exist food_dest
	return
endif


# Check for unsupported behaviour

if_not_flag current IS_PERSON
	print msg_DontKnowWhatToDo
	printcr
	return
endif

# Check for feeding robots

if_flag current CANT_EAT
	print msg_DontNeedToEat
	printcr
	return
endif

# Food can be poisoned
add current.user.poison + p.user.poison
if current.user.poison < 0
	let current.user.poison = 0
endif


# Now, eating stuff.  Heal the recipient
if p.stats.str = 0
	# Choose a random heal amount if 0
	random p.stats.str between 1 5
endif

add current.stats.hp + p.stats.str
if current.stats.hp > current.maxstats.hp
	let current.stats.hp = current.maxstats.hp
endif

# Keep them in sync, or you will feel no pain and then suddenly die
check_hurt current

if current = player
	if p is called "bread_toast"
		object_sound "toast" player
	endif
	if p is called "flower*"
		object_sound "toast" player
	endif
	if p is called "SNACK00"
		object_sound "crisps" player
	endif

endif

if p is called "food13"
	if current = player
		print "~Euurgh!~"
		printcr
	endif
endif

# Delete the food, or reduce the count
if p.stats.quantity > 1
	add p.stats.quantity - 1
else
	# If it has residue, transform it.
	if p.funcs.user2 <> ""
		replace p = p.funcs.user2
	else
		destroy p
	endif
endif

end


##
##	Food Effects
##

function food_effects
private
object c
object fd

# Pies can contain filling
if food_dest is called "FOOD15"
	if_flag current IS_PERSON
		if_exists food_dest.pocket
#			if food_dest.pocket is called "food*"
			if food_dest.pocket.funcs.use = "eat_food"
				# Eat the contents first (recursion pie, anyone?)
				let eat_silently = 1
				let c = current
				let fd = food_dest
				let current = food_dest.pocket
				call eat_food
				let current = c
				let food_dest = fd
				let eat_silently = 0
			else
				# Contents aren't edible, spit it out
				if current = player
					print "~Pppthhhh!~"
					printcr
				endif

				spill food_dest to current.x current.y
				replace food_dest = "food15_dead"
#				transfer_object food_dest to current
				let food_dest = NULL
				return
			endif
		else
			# 'nothing pie'
			if current = player
				print "The pie is strangely unsatisfying."
				printcr
			endif
		endif
	endif
	destroy food_dest
	let food_dest = NULL
	return
endif

# Check for sandwich-building
if current is called "lettuce_leaf"
	if food_dest is called "bread_slice"
		destroy current
		replace food_dest = "sandwich_lettuce"
		# Return success
		let food_dest = NULL
		return
	endif
endif

if current is called "food06"			# Ham sandwich
	if food_dest is called "bread_slice"
		destroy current
		replace food_dest = "sandwich_ham"
		# Return success
		let food_dest = NULL
		return
	endif
endif

# Check for honey
if current is called "jar_honey"
	if food_dest is called "FOODP08"
		replace current = "jar_empty"
		replace food_dest = "FOODP08_honey"
		# Return success
		let food_dest = NULL
		return
	endif
	if food_dest is called "FOODP04"
		replace current = "jar_empty"
		replace food_dest = "FOODP04_honey"
		# Return success
		let food_dest = NULL
		return
	endif
endif

# Check for pouring bowls
if food_dest is called "bowl_*"
	# Transfer to another bowl
	if current is called "bowl"
		replace current = food_dest.name
		replace food_dest = "bowl"
		# Return success
		let food_dest = NULL
		return
	endif
	# Mixing contents
	if current is called "bowl_*"
		if current.name = food_dest.name
			# Both the same
			replace food_dest = "bowl"
		else
			# Dissimilar (eww!)
			replace current = "bowl_gunk"
			replace food_dest = "bowl"
		endif
		# Return success
		let food_dest = NULL
		return
	endif
endif

# Eat the Gunk
if food_dest is called "bowl_gunk"
	print "~No!!~"
	printcr
	let food_dest = NULL
endif

# Raw meat
if food_dest is called "meat*"
	print "~I'm not eating that.~"
	printcr
	let food_dest = NULL
endif

if food_dest is called "fish_o_power"
	add current.user.experience + 10000000
	return
endif

# Ash stuff
if food_dest is called "ash"
	if current is called "FOODP08_honey"
		replace current = "rock03"
		destroy food_dest
		# Return success
		let food_dest = NULL
		return
	endif
	if current is called "FOODP04_honey"
		replace current = "rock03"
		destroy food_dest
		# Return success
		let food_dest = NULL
		return
	endif
	if current is called "FOODP08"
		print "~The ash won't stay on!  I wish it was sticky.~"
		printcr
		# Return success
		let food_dest = NULL
		return
	endif
	if current is called "FOODP04"
		print "~The ash won't stay on!  I wish it was sticky.~"
		printcr
		# Return success
		let food_dest = NULL
		return
	endif
endif

# Otherwise..
if food_dest is called "ash"
	print "The ash goes everywhere."
	printcr
endif

##
## Now look for the reverse logic combinations
##

# First the ash
if current is called "ash"
	if food_dest is called "FOODP04_honey"
		replace food_dest = "rock03"
		destroy current
		# Return success
		let food_dest = NULL
		return
	endif
	if food_dest is called "FOODP04_honey"
		replace food_dest = "rock03"
		destroy current
		# Return success
		let food_dest = NULL
		return
	endif
	if food_dest is called "FOODP08"
		print "~The ash won't stay on!  I wish it was stickier.~"
		printcr
		# Return success
		let food_dest = NULL
		return
	endif
	if food_dest is called "FOODP04"
		print "~The ash won't stay on!  I wish it was stickier.~"
		printcr
		# Return success
		let food_dest = NULL
		return
	endif
endif

# And for the honey:
if food_dest is called "jar_honey"
	if current is called "FOODP08"
		replace food_dest = "jar_empty"
		replace current = "FOODP08_honey"
		# Return success
		let food_dest = NULL
		return
	endif
	if current is called "FOODP04"
		replace food_dest = "jar_empty"
		replace current = "FOODP04_honey"
		# Return success
		let food_dest = NULL
		return
	endif
endif

end



##
##	Apple Tree
##

function appletree
let fruitgot = "Got an apple."
let fruitnotgot = "Can't reach any apples."
let fruitobj = "foodp08"

call fruittree
end

##
##	Carrot Tree
##

function carrottree
let fruitgot = "Got a carrot."
let fruitnotgot = "Can't reach any carrots."
let fruitobj = "foodp05"

call fruittree
end


local
function fruittree
object fruit
integer weight

# Is the tree 'empty'?
if current.stats.karma <= 0
	if me = player
		print fruitnotgot
		printcr
	endif
	return
endif

# Create an apple
create fruit = fruitobj
let fruit.stats.quantity = 1

# Calculate the weight the player is carrying plus the apple
get_weight weight = player
add weight + fruit.stats.weight
add weight - me.stats.weight # Cancel out player's weight

# If the weight is bigger then you can carry
if weight > me.stats.str
	# Wouldn't fit
	destroy fruit
	if me = player
		print msg_CannotCarryIt
		printcr
	endif
	return
else
	move_to_pocket fruit to me
	add current.stats.karma - 1 # Take an apple away
	if me = player
		print fruitgot
		printcr
	endif
endif

end

endlocal

##
##  Player tries to use the honey in the Bee Cave
##

function honey_pool

object jar

if me != player
	return
endif

find jar = "jar_empty" inside player
if_not_exists jar
	print "You need an empty jar to put the honey in."
	printcr
	return
endif

# Transform the jar into a honey jar
replace jar = "jar_honey"
end

##
##  Player tries to eat a stone
##

function eat_stones

integer i

# Do nothing for NPCs
if me != player
	return
endif

# Does the player know about rock-eating?
get_user_flag i = "yado_quest_rocks"
if i = 0
	print "Not usable."
	printcr
	return
endif

# Is it over and done with?
get_user_flag i = "yado_done_rocks"
if i = 1
	print "~I'm through with rock-eating.~"
	printcr
	return
endif

print "~I cannot eat this.~"
printcr
end


function eat_horrible
if me = player
	print "~It tastes gross!~"
	printcr
endif
end
