###################################
#                                 #
#  Move or rotate current object  #
#                                 #
###################################


##
##	Rotate left
##

function rotate_l

if_not_exists current
	let current = me
	if_not_exists current
		return
	endif
endif

if current.curdir = UP
	set_direction current = LEFT
	return
endif

if current.curdir = LEFT
	set_direction current = DOWN
	return
endif

if current.curdir = DOWN
	set_direction current = RIGHT
	return
endif

if current.curdir = RIGHT
	set_direction current = UP
	return
endif

end

##
##	Rotate right
##

function rotate_r

if_not_exists current
	let current = me
	if_not_exists current
		return
	endif
endif

if current.curdir = UP
	set_direction current = RIGHT
	return
endif

if current.curdir = RIGHT
	set_direction current = DOWN
	return
endif

if current.curdir = DOWN
	set_direction current = LEFT
	return
endif

if current.curdir = LEFT
	set_direction current = UP
	return
endif

end


##
##	Rotate 180 degrees
##

function flip_direction

if_not_exists current
	let current = me
	if_not_exists current
		return
	endif
endif

if current.curdir = UP
	set_direction current = DOWN
	return
endif

if current.curdir = DOWN
	set_direction current = UP
	return
endif

if current.curdir = LEFT
	set_direction current = RIGHT
	return
endif

if current.curdir = RIGHT
	set_direction current = LEFT
	return
endif

end



##
##	Move Forward
##

function move_forward

int x
int y
int cost

if_not_exists current
	return
endif

let x = current.x
let y = current.y

centre around current

if current.curdir = RIGHT
	add x + 1
	goto do_move
endif

if current.curdir = LEFT
	add x - 1
	goto do_move
endif

if current.curdir = DOWN
	add y + 1
	goto do_move
endif

if current.curdir = UP
	add y - 1
endif

label do_move

centre around current
get_cost cost = x y
if cost < 100
and cost >= 0
	move_object current to x y
endif


end



##
##	Track an enemy
##

function track_enemy

int x
int y
int ex
int ey
int cost

if_not_exists current
	return
endif

if_not_exists current.enemy
	return
endif

let x = current.x
let y = current.y
let ex = current.enemy.x
let ey = current.enemy.y

if x < ex
	set_direction current facing RIGHT
	add x + 1
endif

if x > ex
	set_direction current facing LEFT
	add x - 1
endif

if y < ey
	set_direction current facing DOWN
	add y + 1
endif

if y > ey
	set_direction current facing UP
	add y - 1
endif

centre around current
get_cost cost = x y
if cost < 100
	move_object current to x y
endif

end

function move_forward_action
activity
let current = me
call move_forward
end
