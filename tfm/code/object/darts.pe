#
#	Dart trap
#
#
#

local
int dartdx = 0
int dartdy = 0
endlocal


##
##	Dart hole entrypoint - publically called
##

function dart_trap

#print "IN DART TRAP|"

# Work out direction and do it

if current.curdir = LEFT
	let dartdx = -1
	let dartdy = 0
	call dart_trap_core
	return
endif

if current.curdir = RIGHT
	let dartdx = 1
	let dartdy = 0
	call dart_trap_core
	return
endif

if current.curdir = UP
	let dartdx = 0
	let dartdy = -1
	call dart_trap_core
	return
endif

if current.curdir = DOWN
	let dartdx = 0
	let dartdy = 1
	call dart_trap_core
	return
endif

end


##
##	Work out the dart stuff (internal)
##

function dart_trap_core
private
integer x
integer y
integer timeout
object temp
object trap
tile temptile

let trap = current

# Get ready
let timeout = 0
let x = current.x + dartdx
let y = current.y + dartdy

# See what we can find

/*
print "IN DART TRAP CORE|"
print "dx = "
print dartdx
print " dy = "
print dartdy
printcr
*/

do
	# Stop when we hit a wall
	get_tile temptile from x y
	if_flag temptile IS_SOLID
/*
		print "HIT WALL at "
		print x
		print ","
		print y
		printcr
*/
		return
	endif

	# Did we hit something else?
	get_solid_object temp from x y

	# What have we found?
	if_exists temp
		# Something else is in the way
		let current.target = temp

#		print "HIT OBJECT|"

		let current = temp
		call trap.funcs.acache
		return
	endif
	

	# Move along
	add x + dartdx
	add y + dartdy
	add timeout + 1

while timeout < mapw # Timeout

#print "TIMED OUT|"

end


function dart_attack

#print "IN DART ATTACK|"

if_not_exists current
	# Oops
	print "DART ATTACK FAILED|"
	return
endif

if_flag current IS_BIOLOGICAL
	add current.user.poison + 50
endif

add current.stats.hp - 10
check_hurt current

end
