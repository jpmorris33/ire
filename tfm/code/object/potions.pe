######################################################
#                                                    #
# Potions                                            #
#                                                    #
######################################################

local
object bottle
endlocal


##
##	Drink
##

function drink_potion

object p

let p = current

# Player has a choice, NPCs use on themselves
if me = player
	let current = player

	print "Use "
	print p.shortdesc
	print " on "
	redraw_text
	call get_far
else
	let current = me
endif

if_not_exist current
	print "nothing"
	printcr
endif

# Messages only for player
if me = player
	print_bestname current
	printcr
endif

# You can use the green potion to poison food
if p is called "potion_green"
	if current.funcs.use = "EAT_FOOD"
		add current.user.poison + 100
		if me = player
			print "Done."
			printcr
		endif
		return
	endif
endif

# You can use the red potion to un-poison food
if p is called "potion_red"
	if current.funcs.use = "EAT_FOOD"
		add current.user.poison - 100
		if me = player
			print "Done."
			printcr
		endif
		return
	endif
endif

if p is called "potion_holywater"
	# Don't cross the streams
	if current is called "potion_unholywater"
	or current is called "font2"
		let victim = p
		call holywater_explosion
		return
	endif

	if current.label.race = "undead"
	or current.label.race = "devil"
		add current.stats.hp - 500
		check_hurt current
		replace p = "potion_empty"
		return
	endif
endif

if p is called "potion_unholywater"
	# Don't cross the streams
	if current is called "potion_holywater"
	or current is called "font1"
		let victim = p
		call holywater_explosion
		return
	endif

	if current is called "MAN_CARDINAL"
	or current is called "MAN_PRIEST"
	or current is called "MAN_POPE"
		add current.stats.hp - 500
		check_hurt current
		replace p = "potion_empty"
		return
	endif

endif

# Fill bottle from font
if p is called "potion_empty"
	if current is called "font1"
		replace p = "potion_holywater"
		return
	endif
	if current is called "font2"
		replace p = "potion_unholywater"
		return
	endif
endif


# Make sure the destination is a person
if_not_flag current IS_PERSON
	replace p = "potion_empty"
	if me = player
		print msg_NoEffect
		printcr
	endif
	return
endif

# Make sure the person is biological (not a god or a robot)
if_flag current CANT_EAT
	if me = player
		print msg_CannotDrinkThings
		printcr
	endif
	return
endif

# Now decide what to do

# Light
if p is called "potion_white"

	call potion_overdose
	let current.user.potion1 = 50
	let lightspell = 128
	if darkness > 32
		let darkness = 16
	endif
	check_hurt current
endif

# Heal
if p is called "potion_yellow"

	call potion_overdose
	add current.stats.hp + p.stats.str
	if current.stats.hp > current.maxstats.hp
		let current.stats.hp = current.maxstats.hp
	endif
	check_hurt current
endif

# Poison
if p is called "potion_green"
	call potion_overdose
	add current.user.poison + 50
	let victim = current
	let victim.enemy = me
	let suspect = me
	check_hurt current
endif

# Cure
if p is called "potion_red"
	call potion_overdose
	let current.user.poison = 0
	check_hurt current
endif

# Invisible
if p is called "potion_black"
	call potion_overdose
	set_flag current IS_SHADOW = 1
	add current.user.potion0 + 50
	check_hurt current
endif

# Sleep
if p is called "potion_blue"
	call potion_overdose
	call lie_down
	add current.user.unconscious + 20
	start_action current does sleeping
	check_hurt current
endif

# Purple and Magenta?

# empty
if p is called "potion_empty"
	if me = player
		print "Empty, dammit!"
		printcr
	endif
	object_sound "smash_little2" current
	destroy p
	return
endif

# Ded Bull give you wings (little angelic ones)
if p is called "ded_bull_energy_drink"
	object_sound "gulp" current
	add current.stats.str + p.stats.str	# Give Energy
	add current.stats.hp - 10		# Give you wings (if you take too much)
	let victim = current
	let suspect = me
	check_hurt current
	replace p = "ded_bull_empty"
	return
endif

# Cocaine Cola (no effect)
if p is called "cocaine_cola"
	object_sound "gulp" current
	replace p = "cocaine_cola_empty"
	if current = player
		call take_drugs_quiet
	endif
	return
endif

# Pepsee
if p is called "pepsee"
	object_sound "gulp" current
	replace p = "pepsee_empty"
	return
endif

# Happy Drink
if p is called "happy_drink"
	object_sound "gulp" current
	add current.stats.hp - 1000	# This will make you very happy
	let victim = current
	let suspect = me
	check_hurt current
	let current.enemy = me
	replace p = "happy_drink_empty"
	return
endif

# Pepsee
if p is called "snack02"
	object_sound "gulp" current
	replace p = "snack02_empty"
	return
endif

/*
# Paracetamol
if p is called "paracetamol"
	object_sound "gulp" current
	let current.user.poison = 0
	add p.stats.quantity - 1
	if p.stats.quantity < 1
		destroy p 		# All gone
	endif
	return
endif

# Aspirin
if p is called "aspirin"
	object_sound "gulp" current
	let current.user.poison = 0
	add p.stats.quantity - 1
	if p.stats.quantity < 1
		destroy p 		# All gone
	endif
	return
endif

# Cod Liver Oil
if p is called "cod_liver_oil"
	object_sound "gulp" current

	add current.stats.hp + 50
	# Don't constrain the HP increase
	check_hurt current
	let current.user.poison = 0
	destroy p
	return
endif


# Herbal Extract
if p is called "herbal_extract"
	object_sound "gulp" current

	let temp = current.stats.hp / 2
	if current.stats.hp < temp
		let current.stats.hp = temp
		check_hurt current
	endif
	destroy p
	return
endif
*/


object_sound "gulp" current
replace p = "potion_empty"

end


##
## Drinking all the potions at once is not recommended
##

function potion_overdose
integer score = 0

if current.user.potion0 > 0
	add score + 1
endif
if current.user.potion1 > 0
	add score + 1
endif
if current.user.poison > 0
	add score + 1
endif

if score > 1
	# Side effects may occur
	if current.user.user0 < 1
		if current = player
			print "~Nnnngh!~"
			printcr
			call take_drugs_quiet
		else
			add current.user.user0 + 50
			print current.personalname
			print " has overdosed!"
			printcr
		endif
	else
		# Straighten out the person
		let current.user.user0 = 0
		if current = player
			call unfreak
		endif

		# And kill them
		add current.stats.hp = -1
		let victim = current
		let suspect = me
		check_hurt current
	endif

endif

end

##
##  Main entrypoint for usage
##

function use_alembic

let bottle = null
if me = player
	call use_alembic_player
else
	call use_alembic_npc
endif

end

##
##  If it's the player
##

function use_alembic_player
private
int x

if current.curdir = UP
or current.curdir = DOWN
	print "It's empty."
	printcr
	return
endif

let x = current.x + 1
get_object bottle = x current.y
if_exists bottle
	if bottle is called "potion_empty"
		call use_alembic_core
		return
	endif
endif

print "You need an empty potion bottle under the alembic."
printcr

end

##
##  If it's an NPC (assumed to be the alchemist)
##

function use_alembic_npc
private
int x
object oldpotion

if current.curdir = UP
or current.curdir = DOWN
	# It's empty, refill it
	force_direction current faces LEFT
	return
endif

# Is there a bottle?
let x = current.x + 1
get_object bottle = x current.y
if_exists bottle
	if bottle is called "potion_empty"
		call use_alembic_core
		if_exists bottle
			let bottle.stats.owner = me
		endif
		return
	endif
endif

# Is it a non-empty potion bottle?
if bottle is called "potion_*"
	# Have we already got one?
	find oldpotion = bottle.name inside me
	if_exists oldpotion
		# OK, we don't want to fill them with potions,
		# destroy the new one and pretend they took it
		destroy bottle
		let bottle = null
		return
	endif

	# Otherwise, take it
	transfer_to_pocket bottle to me
	let bottle = null
	return
endif

# OK, there wasn't a potion bottle there.  Create an empty one
create bottle = "potion_empty"
let bottle.stats.owner = me
transfer_object bottle = x current.y
let bottle = null

end

##
##  Main systems
##

function use_alembic_core
private
int len
int char
int rand
string newpotion

if current.curdir = UP
or current.curdir = DOWN
	let bottle = null
	return
endif

if_not_exists bottle
	return
endif

set_direction current = UP

# Default to no effect
let newpotion = "potion_empty"

# Figure out which potions are allowed and pick one at random
strlen len = current.funcs.user1
if len < 1
	BUG START
	print "Alembic has no potions assigned in USER1 property!"
	printcr
	BUG END
	let bottle = null
	return
endif
random rand between 1 len
strgetpos char = current.funcs.user1 rand


if char = 'R'
	let newpotion = "potion_red"
endif
if char = 'G'
	let newpotion = "potion_green"
endif
if char = 'B'
	let newpotion = "potion_blue"
endif
if char = 'Y'
	let newpotion = "potion_yellow"
endif
if char = 'W'
	let newpotion = "potion_white"
endif
if char = 'K'
	let newpotion = "potion_black"
endif
# These aren't currently used but do exist
if char = 'P'
	let newpotion = "potion_purple"
endif
if char = 'M'
	let newpotion = "potion_magenta"
endif

replace bottle = newpotion

# Empty the alembic
force_direction current faces UP

end


##
##  Provide holy water
##

function give_holywater
	object hw
	find hw = "potion_empty" inside me
	if_exists hw
		replace hw = "potion_holywater"
	else
		print msg_EmptyPotion
		printcr
	endif
end

function give_unholywater
	object hw
	find hw = "potion_empty" inside me
	if_exists hw
		replace hw = "potion_unholywater"
	else
		print msg_EmptyPotion
		printcr
	endif
end

##
##  Player tries to mix the holy water
##

function holywater_explosion
	# Create an invisible object for the halo to centre on
	object focus
	create focus = "target"
	transfer_object focus to current.x current.y

        lightning 25
        play_sound "boom"
        let player.stats.hp = -1000
        check_hurt player
#        set_flag current IS_INVISIBLE = 1

	let victim.stats.hp = -1
	let current.stats.hp = -1
	check_hurt victim
	check_hurt current

        let me = current
        let me.stats.damage = 1000
        call explode_quiet
	# Current has probably changed from the explosion

        let focus.user.user18 = 96
        let focus.user.user17 = 8
        startfx focus does fx_whitecorona

	wait 4000 NONBLOCKING
	# End the world, even if the player used a patsy
	restart_game

end
